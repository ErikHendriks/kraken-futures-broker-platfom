import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { PlotlyService } from './plotly.service';
import { PlotlySharedModule } from './plotly-shared.module';
export class PlotlyViaCDNModule {
    constructor(plotlyService) {
        this.plotlyService = plotlyService;
        PlotlyService.setModuleName('ViaCDN');
    }
    static setPlotlyVersion(version) {
        const isOk = version === 'latest' || /^\d\.\d{1,2}\.\d{1,2}$/.test(version);
        if (!isOk) {
            throw new Error(`Invalid plotly version. Please set 'latest' or version number (i.e.: 1.4.3)`);
        }
        PlotlyViaCDNModule.loadViaCDN();
        PlotlyViaCDNModule.plotlyVersion = version;
    }
    static setPlotlyBundle(bundle) {
        const isOk = bundle === null || PlotlyViaCDNModule.plotlyBundleNames.indexOf(bundle) >= 0;
        if (!isOk) {
            const names = PlotlyViaCDNModule.plotlyBundleNames.map(n => `"${n}"`).join(', ');
            throw new Error(`Invalid plotly bundle. Please set to null for full or ${names} for a partial bundle.`);
        }
        PlotlyViaCDNModule.plotlyBundle = bundle;
    }
    static loadViaCDN() {
        PlotlyService.setPlotly('waiting');
        const init = () => {
            const src = PlotlyViaCDNModule.plotlyBundle == null
                ? `https://cdn.plot.ly/plotly-${PlotlyViaCDNModule.plotlyVersion}.min.js`
                : `https://cdn.plot.ly/plotly-${PlotlyViaCDNModule.plotlyBundle}-${PlotlyViaCDNModule.plotlyVersion}.min.js`;
            const script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = src;
            script.onerror = () => console.error(`Error loading plotly.js library from ${src}`);
            const head = document.getElementsByTagName('head')[0];
            head.appendChild(script);
            let counter = 200; // equivalent of 10 seconds...
            const fn = () => {
                const plotly = window.Plotly;
                if (plotly) {
                    PlotlyService.setPlotly(plotly);
                }
                else if (counter > 0) {
                    counter--;
                    setTimeout(fn, 50);
                }
                else {
                    throw new Error(`Error loading plotly.js library from ${src}. Timeout.`);
                }
            };
            fn();
        };
        setTimeout(init);
    }
}
PlotlyViaCDNModule.plotlyBundle = null;
PlotlyViaCDNModule.plotlyVersion = 'latest';
PlotlyViaCDNModule.plotlyBundleNames = ['basic', 'cartesian', 'geo', 'gl3d', 'gl2d', 'mapbox', 'finance'];
PlotlyViaCDNModule.decorators = [
    { type: NgModule, args: [{
                declarations: [],
                imports: [CommonModule, PlotlySharedModule],
                providers: [PlotlyService],
                exports: [PlotlySharedModule],
            },] }
];
PlotlyViaCDNModule.ctorParameters = () => [
    { type: PlotlyService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxvdGx5LXZpYS1jZG4ubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvcGxvdGx5L3NyYy9saWIvcGxvdGx5LXZpYS1jZG4ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQVk1RCxNQUFNLE9BQU8sa0JBQWtCO0lBSzNCLFlBQW1CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzNDLGFBQWEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFlO1FBQzFDLE1BQU0sSUFBSSxHQUFHLE9BQU8sS0FBSyxRQUFRLElBQUksd0JBQXdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVFLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDUCxNQUFNLElBQUksS0FBSyxDQUFDLDZFQUE2RSxDQUFDLENBQUM7U0FDbEc7UUFFRCxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNoQyxrQkFBa0IsQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDO0lBQy9DLENBQUM7SUFFTSxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQXdCO1FBQ2xELE1BQU0sSUFBSSxHQUFHLE1BQU0sS0FBSyxJQUFJLElBQUksa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRixJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1AsTUFBTSxLQUFLLEdBQUcsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqRixNQUFNLElBQUksS0FBSyxDQUFDLHlEQUF5RCxLQUFLLHdCQUF3QixDQUFDLENBQUM7U0FDM0c7UUFFRCxrQkFBa0IsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO0lBQzdDLENBQUM7SUFFTSxNQUFNLENBQUMsVUFBVTtRQUNwQixhQUFhLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRW5DLE1BQU0sSUFBSSxHQUFHLEdBQUcsRUFBRTtZQUNkLE1BQU0sR0FBRyxHQUFHLGtCQUFrQixDQUFDLFlBQVksSUFBSSxJQUFJO2dCQUMvQyxDQUFDLENBQUMsOEJBQThCLGtCQUFrQixDQUFDLGFBQWEsU0FBUztnQkFDekUsQ0FBQyxDQUFDLDhCQUE4QixrQkFBa0IsQ0FBQyxZQUFZLElBQUksa0JBQWtCLENBQUMsYUFBYSxTQUFTLENBQUM7WUFFakgsTUFBTSxNQUFNLEdBQXNCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbkUsTUFBTSxDQUFDLElBQUksR0FBRyxpQkFBaUIsQ0FBQztZQUNoQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUNqQixNQUFNLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsd0NBQXdDLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFFcEYsTUFBTSxJQUFJLEdBQW9CLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2RSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRXpCLElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDLDhCQUE4QjtZQUVqRCxNQUFNLEVBQUUsR0FBRyxHQUFHLEVBQUU7Z0JBQ1osTUFBTSxNQUFNLEdBQUksTUFBYyxDQUFDLE1BQU0sQ0FBQztnQkFDdEMsSUFBSSxNQUFNLEVBQUU7b0JBQ1IsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDbkM7cUJBQU0sSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO29CQUNwQixPQUFPLEVBQUcsQ0FBQztvQkFDWCxVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2lCQUN0QjtxQkFBTTtvQkFDSCxNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxHQUFHLFlBQVksQ0FBQyxDQUFDO2lCQUM1RTtZQUNMLENBQUMsQ0FBQztZQUVGLEVBQUUsRUFBRSxDQUFDO1FBQ1QsQ0FBQyxDQUFDO1FBRUYsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JCLENBQUM7O0FBOURjLCtCQUFZLEdBQVksSUFBSSxDQUFDO0FBQzdCLGdDQUFhLEdBQUcsUUFBUSxDQUFDO0FBQzFCLG9DQUFpQixHQUF1QixDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDOztZQVQ1SCxRQUFRLFNBQUM7Z0JBQ04sWUFBWSxFQUFFLEVBQUU7Z0JBQ2hCLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxrQkFBa0IsQ0FBQztnQkFDM0MsU0FBUyxFQUFFLENBQUMsYUFBYSxDQUFDO2dCQUMxQixPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQzthQUNoQzs7O1lBWlEsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBQbG90bHlTZXJ2aWNlIH0gZnJvbSAnLi9wbG90bHkuc2VydmljZSc7XG5pbXBvcnQgeyBQbG90bHlTaGFyZWRNb2R1bGUgfSBmcm9tICcuL3Bsb3RseS1zaGFyZWQubW9kdWxlJztcblxuXG5leHBvcnQgdHlwZSBQbG90bHlCdW5kbGVOYW1lID0gJ2Jhc2ljJyB8ICdjYXJ0ZXNpYW4nIHwgJ2dlbycgfCAnZ2wzZCcgfCAnZ2wyZCcgfCAnbWFwYm94JyB8ICdmaW5hbmNlJztcblxuXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW10sXG4gICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgUGxvdGx5U2hhcmVkTW9kdWxlXSxcbiAgICBwcm92aWRlcnM6IFtQbG90bHlTZXJ2aWNlXSxcbiAgICBleHBvcnRzOiBbUGxvdGx5U2hhcmVkTW9kdWxlXSxcbn0pXG5leHBvcnQgY2xhc3MgUGxvdGx5VmlhQ0ROTW9kdWxlIHtcbiAgICBwcml2YXRlIHN0YXRpYyBwbG90bHlCdW5kbGU/OiBzdHJpbmcgPSBudWxsO1xuICAgIHByaXZhdGUgc3RhdGljIHBsb3RseVZlcnNpb24gPSAnbGF0ZXN0JztcbiAgICBwdWJsaWMgc3RhdGljIHBsb3RseUJ1bmRsZU5hbWVzOiBQbG90bHlCdW5kbGVOYW1lW10gPSBbJ2Jhc2ljJywgJ2NhcnRlc2lhbicsICdnZW8nLCAnZ2wzZCcsICdnbDJkJywgJ21hcGJveCcsICdmaW5hbmNlJ107XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcGxvdGx5U2VydmljZTogUGxvdGx5U2VydmljZSkge1xuICAgICAgICBQbG90bHlTZXJ2aWNlLnNldE1vZHVsZU5hbWUoJ1ZpYUNETicpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgc2V0UGxvdGx5VmVyc2lvbih2ZXJzaW9uOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaXNPayA9IHZlcnNpb24gPT09ICdsYXRlc3QnIHx8IC9eXFxkXFwuXFxkezEsMn1cXC5cXGR7MSwyfSQvLnRlc3QodmVyc2lvbik7XG4gICAgICAgIGlmICghaXNPaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHBsb3RseSB2ZXJzaW9uLiBQbGVhc2Ugc2V0ICdsYXRlc3QnIG9yIHZlcnNpb24gbnVtYmVyIChpLmUuOiAxLjQuMylgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFBsb3RseVZpYUNETk1vZHVsZS5sb2FkVmlhQ0ROKCk7XG4gICAgICAgIFBsb3RseVZpYUNETk1vZHVsZS5wbG90bHlWZXJzaW9uID0gdmVyc2lvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHNldFBsb3RseUJ1bmRsZShidW5kbGU6IFBsb3RseUJ1bmRsZU5hbWUpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaXNPayA9IGJ1bmRsZSA9PT0gbnVsbCB8fCBQbG90bHlWaWFDRE5Nb2R1bGUucGxvdGx5QnVuZGxlTmFtZXMuaW5kZXhPZihidW5kbGUpID49IDA7XG4gICAgICAgIGlmICghaXNPaykge1xuICAgICAgICAgICAgY29uc3QgbmFtZXMgPSBQbG90bHlWaWFDRE5Nb2R1bGUucGxvdGx5QnVuZGxlTmFtZXMubWFwKG4gPT4gYFwiJHtufVwiYCkuam9pbignLCAnKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwbG90bHkgYnVuZGxlLiBQbGVhc2Ugc2V0IHRvIG51bGwgZm9yIGZ1bGwgb3IgJHtuYW1lc30gZm9yIGEgcGFydGlhbCBidW5kbGUuYCk7XG4gICAgICAgIH1cblxuICAgICAgICBQbG90bHlWaWFDRE5Nb2R1bGUucGxvdGx5QnVuZGxlID0gYnVuZGxlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgbG9hZFZpYUNETigpOiB2b2lkIHtcbiAgICAgICAgUGxvdGx5U2VydmljZS5zZXRQbG90bHkoJ3dhaXRpbmcnKTtcblxuICAgICAgICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3JjID0gUGxvdGx5VmlhQ0ROTW9kdWxlLnBsb3RseUJ1bmRsZSA9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBgaHR0cHM6Ly9jZG4ucGxvdC5seS9wbG90bHktJHtQbG90bHlWaWFDRE5Nb2R1bGUucGxvdGx5VmVyc2lvbn0ubWluLmpzYFxuICAgICAgICAgICAgICAgIDogYGh0dHBzOi8vY2RuLnBsb3QubHkvcGxvdGx5LSR7UGxvdGx5VmlhQ0ROTW9kdWxlLnBsb3RseUJ1bmRsZX0tJHtQbG90bHlWaWFDRE5Nb2R1bGUucGxvdGx5VmVyc2lvbn0ubWluLmpzYDtcblxuICAgICAgICAgICAgY29uc3Qgc2NyaXB0OiBIVE1MU2NyaXB0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICAgICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICAgICAgICAgIHNjcmlwdC5zcmMgPSBzcmM7XG4gICAgICAgICAgICBzY3JpcHQub25lcnJvciA9ICgpID0+IGNvbnNvbGUuZXJyb3IoYEVycm9yIGxvYWRpbmcgcGxvdGx5LmpzIGxpYnJhcnkgZnJvbSAke3NyY31gKTtcblxuICAgICAgICAgICAgY29uc3QgaGVhZDogSFRNTEhlYWRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgICAgICAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcblxuICAgICAgICAgICAgbGV0IGNvdW50ZXIgPSAyMDA7IC8vIGVxdWl2YWxlbnQgb2YgMTAgc2Vjb25kcy4uLlxuXG4gICAgICAgICAgICBjb25zdCBmbiA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwbG90bHkgPSAod2luZG93IGFzIGFueSkuUGxvdGx5O1xuICAgICAgICAgICAgICAgIGlmIChwbG90bHkpIHtcbiAgICAgICAgICAgICAgICAgICAgUGxvdGx5U2VydmljZS5zZXRQbG90bHkocGxvdGx5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvdW50ZXIgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ZXIgLS07XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZm4sIDUwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIGxvYWRpbmcgcGxvdGx5LmpzIGxpYnJhcnkgZnJvbSAke3NyY30uIFRpbWVvdXQuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZXRUaW1lb3V0KGluaXQpO1xuICAgIH1cbn1cbiJdfQ==